Next:
1. Develop tests for input functions
2. Add infix/postfix functions (you can expect to change all output functions)

Order:
1. Take input from user O
2. Generate Input array O
3. Reorder array into post fix order 
4. Run operations in 'post fix way' on reordered array and return result

Stack Guide
Use pop rather than shift (shift has to reindex)
The end is the top, and the start is the bottom (lifo)

Infix > Postfix Guide (No code)


Rules:
1. Priorities must be followed.
High - ^
Mid - * / 
Low - + -

2. No 2 operators of same priority can stay together. In case of meeting,
pop the top element and add to postfix.

3. If the top element of stack is higher than current element,
pop the top element and add to postfix. If the top element is lower,
the higher element can be added.

4. If there is a left bracket wait for right

5. If there is a right bracket, pop everything after the left bracket. 

6. When any rule is broken, pop all numbers that are broken. 
E.g. current num is -. stack contains * +.
* and + must be popped at this point.

TDD:- 
infix/postfix has a lot of moving parts. break it down into individual output you expect.
1. opStack should collect the operators and postfix collect all the numbers O 
2. opStack should compare current with top of stack, if new element is same or higher, pop opStack and add current 

Now you need to define the order for when this function is called. 
